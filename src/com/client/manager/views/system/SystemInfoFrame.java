/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.client.manager.views.system;

import com.client.manager.Application;
import com.client.manager.constants.WebMethods;
import com.client.manager.constants.WindowUtility;
import com.client.service.Properties;
import com.marksmana.info.Information;
import com.marksmana.info.SingleInformation;
import com.marksmana.utils.Json;
import javax.swing.SpinnerModel;
import javax.swing.SpinnerNumberModel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author HuongUD
 */
public class SystemInfoFrame extends javax.swing.JPanel {

    private DefaultTableModel mInfo;
    private SpinnerNumberModel mMinCoeff, mMaxCoeff;

    /**
     * Creates new form SystemInfoFrame
     */
    public SystemInfoFrame() {
        initComponents();
        initSpinners();
        initData();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblDateFormat = new javax.swing.JLabel();
        txtDateFormat = new javax.swing.JTextField();
        btnHelp = new javax.swing.JButton();
        lblTimeFormat = new javax.swing.JLabel();
        txtTimeFormat = new javax.swing.JTextField();
        btnHelpp = new javax.swing.JButton();
        lblHighestCoefficient = new javax.swing.JLabel();
        spnMinCoeff = new javax.swing.JSpinner();
        btnApplyUpper = new javax.swing.JButton();
        spnMaxCoeff = new javax.swing.JSpinner();
        jLabel1 = new javax.swing.JLabel();

        lblDateFormat.setText("Định dạng ngày:");

        txtDateFormat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDateFormatActionPerformed(evt);
            }
        });

        btnHelp.setText("?");
        btnHelp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHelpActionPerformed(evt);
            }
        });

        lblTimeFormat.setText("Định dạng giờ:");

        txtTimeFormat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTimeFormatActionPerformed(evt);
            }
        });

        btnHelpp.setText("?");
        btnHelpp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHelppActionPerformed(evt);
            }
        });

        lblHighestCoefficient.setText("Hệ số:");

        spnMinCoeff.setModel(new javax.swing.SpinnerNumberModel(1, 1, 3, 1));
        spnMinCoeff.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spnMinCoeffStateChanged(evt);
            }
        });

        btnApplyUpper.setText("Áp dụng");
        btnApplyUpper.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnApplyUpperActionPerformed(evt);
            }
        });

        spnMaxCoeff.setModel(new javax.swing.SpinnerNumberModel(3, null, null, 1));
        spnMaxCoeff.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spnMaxCoeffStateChanged(evt);
            }
        });

        jLabel1.setText(" - ");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(lblHighestCoefficient, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblTimeFormat, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblDateFormat, javax.swing.GroupLayout.DEFAULT_SIZE, 96, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(spnMinCoeff, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(spnMaxCoeff, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 311, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtDateFormat)
                                    .addComponent(txtTimeFormat))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnHelpp, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnHelp, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnApplyUpper, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDateFormat)
                    .addComponent(txtDateFormat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnHelp))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTimeFormat)
                    .addComponent(txtTimeFormat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnHelpp))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblHighestCoefficient)
                    .addComponent(spnMinCoeff, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(spnMaxCoeff, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(8, 8, 8)
                .addComponent(btnApplyUpper)
                .addContainerGap(211, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void txtDateFormatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDateFormatActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDateFormatActionPerformed

    private void txtTimeFormatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTimeFormatActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTimeFormatActionPerformed

    private void btnHelppActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHelppActionPerformed
        // TODO add your handling code here:
        StringBuilder sb = new StringBuilder("Đạnh dạng giờ:\n");
        sb.append("\tH - giờ (0-24)\n");
        sb.append("\tK - giờ (0-11)\n");
        sb.append("\tm - phút (0-59)\n");
        sb.append("\ts - giây (0-59)\n");
        sb.append("\tS - mili giây (0-100)\n");
        sb.append("\ta - kí hiệu AM/PM\n");
        sb.append("\tz - múi giờ\n");
        sb.append("\nVí dụ: KK:mm a -> 10:48 AM");
        WindowUtility.showMessage(this, "Định dạng giờ", sb.toString(), WindowUtility.DEFAULT);
    }//GEN-LAST:event_btnHelppActionPerformed

    private void btnApplyUpperActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnApplyUpperActionPerformed
        // TODO add your handling code here:
        String dateFmt = txtDateFormat.getText();
        String timeFmt = txtTimeFormat.getText();
        String maxCoeff = spnMaxCoeff.getValue().toString();
        String minCoeff = spnMinCoeff.getValue().toString();
        if (!(dateFmt.matches("([d|M|y|E|z]+\\W*)+") || timeFmt.matches("([H|K|m|s|S|a|z]+\\W*)+"))) {
            WindowUtility.showMessage(this, "Lỗi dữ liệu", "Định dạng ngày và giờ không hợp lệ!", WindowUtility.ERROR);
            return;
        }
        new Thread(() -> {
            btnApplyUpper.setEnabled(false);
            Properties p = new Properties();
            p.setKey("date_format");
            p.setValue(dateFmt);
            Application.PROP.put("date_format", dateFmt);
            WebMethods.updateProperty(p);
            p.setKey("time_format");
            p.setValue(timeFmt);
            Application.PROP.put("time_format", timeFmt);
            WebMethods.updateProperty(p);
            p.setKey("min_coeff");
            p.setValue(minCoeff);
            Application.PROP.put("min_coeff", minCoeff);
            WebMethods.updateProperty(p);
            p.setKey("max_coeff");
            p.setValue(maxCoeff);
            Application.PROP.put("max_coeff", maxCoeff);
            WebMethods.updateProperty(p);
            btnApplyUpper.setEnabled(true);
        }).start();
    }//GEN-LAST:event_btnApplyUpperActionPerformed

    private void btnHelpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHelpActionPerformed
        // TODO add your handling code here:
        StringBuilder sb = new StringBuilder("Đạnh dạng ngày:\n");
        sb.append("\td - ngày\n");
        sb.append("\tM - tháng (chữ số)\n");
        sb.append("\tMMM - tháng (viết tắt)\n");
        sb.append("\tyy - năm (2 chữ số)\n");
        sb.append("\tyyyy - năm (4 chữ số)\n");
        sb.append("\tE - thứ trong tuần\n");
        sb.append("\tEEE - thứ trong tuần (viết tắt)\n");
        sb.append("\tz - múi giờ\n");
        sb.append("\nVí dụ: dd-MM-yy -> 25-01-16");
        WindowUtility.showMessage(this, "Định dạng ngày", sb.toString(), WindowUtility.DEFAULT);
    }//GEN-LAST:event_btnHelpActionPerformed

    private void spnMinCoeffStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spnMinCoeffStateChanged
        // TODO add your handling code here:
        refreshSpinners();
    }//GEN-LAST:event_spnMinCoeffStateChanged

    private void spnMaxCoeffStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spnMaxCoeffStateChanged
        // TODO add your handling code here:
        refreshSpinners();
    }//GEN-LAST:event_spnMaxCoeffStateChanged


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnApplyUpper;
    private javax.swing.JButton btnHelp;
    private javax.swing.JButton btnHelpp;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel lblDateFormat;
    private javax.swing.JLabel lblHighestCoefficient;
    private javax.swing.JLabel lblTimeFormat;
    private javax.swing.JSpinner spnMaxCoeff;
    private javax.swing.JSpinner spnMinCoeff;
    private javax.swing.JTextField txtDateFormat;
    private javax.swing.JTextField txtTimeFormat;
    // End of variables declaration//GEN-END:variables

    private void initData() {
        try {
            txtDateFormat.setText(Application.PROP.get("date_format").toString());
            txtTimeFormat.setText(Application.PROP.get("time_format").toString());
        } catch (Exception e) {
        }
    }

    private void initSpinners() {
        mMinCoeff = (SpinnerNumberModel) spnMinCoeff.getModel();
        mMaxCoeff = (SpinnerNumberModel) spnMaxCoeff.getModel();
        mMinCoeff.setValue(Integer.parseInt(Application.PROP.get("min_coeff").toString()));
        mMaxCoeff.setValue(Integer.parseInt(Application.PROP.get("max_coeff").toString()));
        refreshSpinners();
    }

    private void refreshSpinners() {
        mMinCoeff.setMaximum(mMaxCoeff.getNumber().intValue());
        mMaxCoeff.setMinimum(mMinCoeff.getNumber().intValue());
    }

}
